rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null
    }

    match /bills/{billDoc} {
      function isEditor() {
      	return request.auth.uid in resource.data.users || request.auth.uid in resource.data.editors // TODO need to delete the first part when we move to new schema
      }
      function isCreator() {
      	return request.auth.uid == resource.data.creatorUid  // TODO need  to delete this line
          || request.auth.uid == resource.data.creator
      }

      allow read: if isSignedIn() && isEditor();
      
    	allow create: if isSignedIn() &&
      	request.resource.data.creator == request.auth.uid &&
        request.resource.data.name is string &&
        request.resource.data.name.size() >= 1 &&
        request.resource.data.name.size() <= 20 &&
        request.auth.uid in request.resource.data.editors &&
        request.resource.data.friends.size() > 0;
      
      allow update: if isSignedIn() && isEditor() &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['name', 'creatorUid']);
        // might be better to do the other rules inside a cloud function
      
      allow delete: if isCreator();

      match /items/{itemDoc} {
        allow read;
        allow write;
      }
    }

    match /users/{userDoc} {
      allow read: if isSignedIn() && userDoc == request.auth.uid

      // only allow update of primaryBill
      allow update: if isSignedIn() && userDoc == request.auth.uid
        && (request.resource.data.keys().hasOnly(['primaryBill']))
    }
  }
}